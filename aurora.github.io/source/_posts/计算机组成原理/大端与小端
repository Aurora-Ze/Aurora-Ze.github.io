---
title: 大端与小端
categories: 计算机组成原理
---

## 大端与小端

#### 简单定义

大端和小端的概念是针对计算机内存中字、字节的存储顺序来说的

- 大端

  高位的字节先存储

- 小端

  低位的字节先存储

#### 示例

上述的定义可能不太直观，我们通过一个例子来展现一下

现在假设我们要存储一个`32位`的数据，它的十六进制表示为`0x1234ABCD`(每两位表示一个字节)

而内存是以`0x0000`作为起始

采用「大端」和「小端」的存储方式，结果如下表

| address | big endian | little endian |
| :-----: | :--------: | :-----------: |
| 0x0000  |   0x0012   |    0x00CD     |
| 0x0001  |   0x0034   |    0x00AB     |
| 0x0002  |   0x00AB   |    0x0034     |
| 0x0003  |   0x00CD   |    0x0012     |

#### 应用

Intel x86系列的CPU采用的是小端存储，而Java字节码以及PowerPC系列的CPU采用的是大端存储。

如果不同存储类型的计算机想要进行数据传输，就必须进行数据转换才能够识别。

#### 补充

上面我们提到的大端和小端是以字节为单位的，那么一字节等于8比特，比特位之间是否也有大小端存储之分呢？

实际上确实也有。**比特位也可以按照大小端的定义方式来存储。**

另外，不得不提到两个概念，即**MSB**(most significant bit)和**LSB**(least significant bit)

以`0x12`为例，它用十进制表示为`18`，用二进制表示为`00010010`

- 如果按大端存储，就是`00010010`
- 如果按小端存储，则是`01001000`

可以发现，如果按照大端的方式存储，最高有效位就在最左边，最低有效位在最右边

小端则相反。

